name: DevSecOps Pipeline Workflow

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  Static-Application-Security-Testing-SAST: 
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven 

      - name: Perform ShiftLeft Scan
        uses: ShiftLeftSecurity/scan-action@master
        with:
          type: "java,javascript,credscan,depscan,python,html,go,jsp,node.js,bash"
        env:
          WORKSPACE: https://github.com/${{ github.repository }}/blob/${{ github.sha }}
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
          SCAN_AUTO_BUILD: true

      - name: Upload ShiftLeft SAST reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: shiftleft-sast-reports
          path: shiftleft

      - name: Run Semgrep scan
        run: |
          semgrep --json --output report.json --metrics=off --config="p/default" --verbose

      - name: Save Semgrep report as pipeline artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Semgrep-Report
          path: report.json

  Static-Code-Quality-Check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write

    needs: Static-Application-Security-Testing-SAST
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3
          
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 10
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


  Secret-Scanning:
    runs-on: ubuntu-latest
    needs: Static-Code-Quality-Check
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write

    steps:

       - name: Checkout repository
         uses: actions/checkout@v3
  
       - name: Secret Scanner
         uses: gitleaks/gitleaks-action@v2
         env:
            GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
            GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Organizations, not personal accounts.
         continue-on-error: true
  
       - name: Upload Secret Scanning reports
         if: always()
         uses: actions/upload-artifact@v4
         with:
            name: secret-scanning-reports
            path: secret-scanning-reports

  Build-Tag-Push-Scan:
    runs-on: ubuntu-latest
    needs: Secret-Scanning
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write

    steps:

       - name: Checkout repository
         uses: actions/checkout@v3

       - name: Set up JDK 17
         uses: actions/setup-java@v3
         with:
            java-version: '17'
            distribution: 'temurin'
            cache: maven
  
       - name: Build with Maven
         run: mvn package --file pom.xml
  
       - name: Upload build artifact
         if: always()
         uses: actions/upload-artifact@v4
         with:
            name: Boardgame
            path: target/*.jar
  
       - name: Set up QEMU
         uses: docker/setup-qemu-action@v3
    
       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v3
    
       - name: Build Docker Image
         run: docker build -t anshumaan10/boardgame:latest . 

       - name: Install Trivy
         run: |
            sudo apt-get update
            sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
        
            echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
        
            sudo apt-get update
            sudo apt-get install -y trivy

    
       - name: Trivy Image Scan
         run: trivy image --format table -o trivy-image-report.html anshumaan10/boardgame:latest
        
       - name: Upload Trivy Image Scan report
         if: always()
         uses: actions/upload-artifact@v4
         with:
            name: trivy-image-report
            path: trivy-image-report.html

      # Login to Docker Hub
       - name: Login to Docker Hub
         uses: docker/login-action@v3
         with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}


       # - name: Docker Scout for Image Scan
       #   uses: docker/scout-action@v1
       #   with:
       #      image: anshumaan10/boardgame:latest
       #      ignore-unchanged: true
       #      write-comment: true
       #      github-token: ${{ secrets.TOKEN_GITHUB }} # to be able to write the comment
       #      continue-on-error: true
            

       # - name: Upload Scout Report Artifact
       #   uses: actions/upload-artifact@v3
       #   with:
       #      name: scout-report
       #      path: scout-report.json
      # Push Docker image
       - name: Push Docker Image
         run: |
           docker push anshumaan10/boardgame:latest 

  Software-Bill-of-Material-SBOM:
    needs: Build-Tag-Push-Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write
    steps:
    

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull Docker Image
        run: |
          docker pull anshumaan10/boardgame:latest


      - name: Generate SBOM and Upload Artifact
        uses: anchore/sbom-action@v0
        with:
          image: anshumaan10/boardgame:latest
          format: spdx-json
          artifact-name: sbom-report.spdx.json
          output-file: sbom-report.json
          upload-artifact: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  Software-Composition-Analysis-SCA:
    runs-on: ubuntu-latest
    needs: Build-Tag-Push-Scan
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build project with Maven
        run: mvn clean install

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'test'
          path: '.'
          format: 'HTML'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          args: >
            --failOnCVSS 7
            --enableRetired
        continue-on-error: true

      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
          name: Depcheck report
          path: ${{ github.workspace }}/reports


      - name: Install Trivy
        run: |
            sudo apt-get update
            sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
        
            echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
        
            sudo apt-get update
            sudo apt-get install -y trivy
            
      - name: Trivy FS Scan
        run: trivy fs --format table -o trivy-fs-report.html .
    
      - name: Upload Trivy FS Scan report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs-report 
          path: trivy-fs-report.html



  kubernetes-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write

    needs: Software-Composition-Analysis-SCA
    steps:

       - name: Checkout repository
         uses: actions/checkout@v3

      # Uncomment and configure the following steps for Kubernetes deployment
       - name: Set up Kubectl
         uses: tale/kubectl-action@v1
         with:
            base64-kube-config: ${{ secrets.KUBE_CONFIG }}

       - name: Deploy to Kubernetes
         run: |
            kubectl apply -f deployment-service.yaml -n webapps
            kubectl get svc -n webapps

  DAST-Scan:
    runs-on: ubuntu-latest
    needs: kubernetes-deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # - name: ZAP Scan
      #   uses: zaproxy/action-baseline@v0.12.0
      #   with:
      #     token: ${{ secrets.TOKEN_GITHUB }}
      #     docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
      #     target: 'https://demo.testfire.net'
      #     rules_file_name: '.zap/rules.tsv'
      #     cmd_options: '-a'
      #   continue-on-error: true
        
      # - name: Upload JSON report
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: zap-report-json
      #     path: report_json.json

      # - name: Upload Markdown report
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: zap-report-md
      #     path: report_md.md

      # - name: Upload HTML report
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: zap-report-html
      #     path: report_html.html

  Send-Slack-Notification:
    runs-on: ubuntu-latest
    needs: DAST-Scan
    steps:
      - name: Send notification on Slack
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "color": "good",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "*Repository:* anshumaan-10/Boardgame-Pipeline\n*Branch:* main\n*Commit ID:* 7ce470892918a10a329d6dc4caf33edbb09953dd\n*Commit Message:* Create k8s.yml\n*Author:* ANSHUMAAN SINGH\n*Build Status:* success\n*Commit URL:* https://github.com/anshumaan-10/Boardgame-Pipeline/commit/7ce470892918a10a329d6dc4caf33edbb09953dd"
                      }
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
