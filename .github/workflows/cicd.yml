name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  pipeline:
    runs-on: self-hosted
    steps:
    # Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Set up JDK 17
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Build the Maven project
    - name: Build with Maven
      run: mvn package --file pom.xml

    # Upload Maven build artifact
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: Boardgame
        path: target/*.jar

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build Docker image
    - name: Build Docker Image
      run: docker build -t anshumaan10/boardgame:latest .

    # Perform Trivy image scan
    - name: Trivy Image Scan
      run: |
        trivy image --format table -o trivy-image-report.html anshumaan10/boardgame:latest
    
    - name: Upload Trivy Image Scan report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-image-report
        path: trivy-image-report.html

    # Perform Snyk security scan
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    # Perform Trivy FS scan
    - name: Trivy FS Scan
      run: |
        trivy fs --format table -o trivy-fs-report.html .
    
    - name: Upload Trivy FS Scan report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-fs-report
        path: trivy-fs-report.html

    # Perform SonarQube scan
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    # Install jq
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    # Check SonarQube quality gate
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      continue-on-error: true
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    # Login to Docker Hub
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Push Docker image
    - name: Push Docker Image
      run: |
        docker push anshumaan10/boardgame:latest

    # Apply Kubernetes manifests
    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
    
    - run: |
        kubectl apply -f deployment-service.yaml -n webapps
        kubectl get svc -n webapps
