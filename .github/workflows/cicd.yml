name: CICD Pipeline

on:
  push:
    branches: [ "main" ] # Trigger pipeline on push to main branch

jobs:
  checkout:
    runs-on: self-hosted # Use a self-hosted runner

    steps:
    - uses: actions/checkout@v3 # Check out the repository code

  setup-java:
    runs-on: self-hosted # Use a self-hosted runner
    needs: checkout # Depend on the checkout job

    steps:
    - name: Set up JDK 17 # Set up Java Development Kit 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

  build:
    runs-on: self-hosted # Use a self-hosted runner
    needs: setup-java # Depend on the setup-java job

    steps:
    - name: Build with Maven # Build the project using Maven
      run: mvn package --file pom.xml

    - uses: actions/upload-artifact@v4 # Upload the built JAR artifact
      with:
        name: Boardgame
        path: target/*.jar

  trivy-fs-scan:
    runs-on: self-hosted # Use a self-hosted runner
    needs: build # Depend on the build job

    steps:
    - name: Trivy FS Scan # Perform file system scan with Trivy
      run: |
        trivy fs --format table -o trivy-fs-report.html .

  sonarqube-scan:
    runs-on: self-hosted # Use a self-hosted runner
    needs: build # Depend on the build job

    steps:
    - name: SonarQube Scan # Run SonarQube scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  install-jq:
    runs-on: self-hosted # Use a self-hosted runner
    needs: sonarqube-scan # Depend on the SonarQube scan job

    steps:
    - name: Install jq # Install jq for JSON processing
      run: sudo apt-get update && sudo apt-get install -y jq

  sonarqube-quality-gate-check:
    runs-on: self-hosted # Use a self-hosted runner
    needs: install-jq # Depend on the install-jq job

    steps:
    - name: SonarQube Quality Gate check # Check SonarQube Quality Gate status
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5 # Fail the step after 5 minutes if not completed
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  setup-qemu:
    runs-on: self-hosted # Use a self-hosted runner
    needs: sonarqube-quality-gate-check # Depend on the SonarQube Quality Gate check job

    steps:
    - name: Set up QEMU # Set up QEMU for cross-platform builds
      uses: docker/setup-qemu-action@v3

  setup-buildx:
    runs-on: self-hosted # Use a self-hosted runner
    needs: setup-qemu # Depend on the setup-qemu job

    steps:
    - name: Set up Docker Buildx # Set up Docker Buildx for multi-platform builds
      uses: docker/setup-buildx-action@v3

  build-docker-image:
    runs-on: self-hosted # Use a self-hosted runner
    needs: setup-buildx # Depend on the setup-buildx job

    steps:
    - name: Build Docker Image # Build the Docker image
      run: |
        docker build -t anshumaan10/board:latest .

  trivy-image-scan:
    runs-on: self-hosted # Use a self-hosted runner
    needs: build-docker-image # Depend on the build-docker-image job

    steps:
    - name: Trivy Image Scan # Perform image scan with Trivy
      run: |
        # Verify that the image exists locally
        docker images -a
        # Perform the image scan
        trivy image --format table -o trivy-image-report.html anshumaan10/board:latest

  docker-login:
    runs-on: self-hosted # Use a self-hosted runner
    needs: trivy-image-scan # Depend on the trivy-image-scan job

    steps:
    - name: Login to Docker Hub # Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

  push-docker-image:
    runs-on: self-hosted # Use a self-hosted runner
    needs: docker-login # Depend on the docker-login job

    steps:
    - name: Push Docker Image # Push the Docker image to Docker Hub
      run: |
        docker push anshumaan10/board:latest

  kubectl-apply:
    runs-on: self-hosted # Use a self-hosted runner
    needs: push-docker-image # Depend on the push-docker-image job

    steps:
    - name: Kubectl Action # Apply Kubernetes deployment and service
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}

    - run: |
        kubectl apply -f deployment-service.yaml -n webapps # Apply Kubernetes manifests
        kubectl get svc -n webapps # List services in the 'webapps' namespace
