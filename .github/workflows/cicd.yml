name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  # Job to checkout the repository
  checkout:
    runs-on: self-hosted
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

  # Job to set up JDK 17
  setup-java:
    runs-on: self-hosted
    needs: checkout
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

  # Job to build the Maven project
  build:
    runs-on: self-hosted
    needs: setup-java
    steps:
    - name: Build with Maven
      run: mvn package --file pom.xml

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: Boardgame
        path: target/*.jar

  # Job to perform Snyk security scan
  security:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Job to perform Trivy file system scan
  trivy-fs-scan:
    runs-on: self-hosted
    needs: build
    steps:
    - name: Trivy FS Scan
      run: |
        trivy fs --format table -o trivy-fs-report.html .
    
    - name: Upload Trivy FS Scan report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-fs-report
        path: trivy-fs-report.html

  # Job to perform SonarQube scan
  sonarqube-scan:
    runs-on: self-hosted
    needs: build
    steps:
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Job to install jq
  install-jq:
    runs-on: self-hosted
    needs: sonarqube-scan
    steps:
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

  # Job to check SonarQube quality gate
  sonarqube-quality-gate-check:
    runs-on: self-hosted
    needs: install-jq
    steps:
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Job to set up QEMU
  setup-qemu:
    runs-on: self-hosted
    needs: sonarqube-quality-gate-check
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

  # Job to set up Docker Buildx
  setup-buildx:
    runs-on: self-hosted
    needs: setup-qemu
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

  # Job to build the Docker image
  build-docker-image:
    runs-on: self-hosted
    needs: setup-buildx
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write
    steps:
    - name: Build Docker Image
      run: docker build -t anshumaan10/board:v1.0 .

  # Job to perform Trivy image scan
  trivy-image-scan:
    runs-on: self-hosted
    needs: build-docker-image
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write
    steps:
    - name: Trivy Image Scan
      run: |
        trivy image --format table -o trivy-image-report.html anshumaan10/board:v1.0
    
    - name: Upload Trivy Image Scan report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-image-report
        path: trivy-image-report.html

  # Job to login to Docker Hub
  docker-login:
    runs-on: self-hosted
    needs: trivy-image-scan
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write
    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

  # Job to push the Docker image to Docker Hub
  push-docker-image:
    runs-on: self-hosted
    needs: docker-login
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write
    steps:
    - name: Push Docker Image
      run: |
        docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
        docker push anshumaan10/board:v1.0


  # Job to apply Kubernetes manifests
  kubectl-apply:
    runs-on: self-hosted
    needs: push-docker-image
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write
    steps:
    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
    - run: |
        kubectl apply -f deployment-service.yaml -n webapps
        kubectl get svc -n webapps
